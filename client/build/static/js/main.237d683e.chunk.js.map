{"version":3,"sources":["theme.tsx","Components/SearchBar.tsx","Components/RecipeCard.tsx","Components/Recipes.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["theme","createMuiTheme","palette","primary","500","searchedValue","SearchBar","props","classes","useStyles","useState","inputValue","setInputValue","isLoading","onSubmit","event","preventDefault","setApiResponse","ingredientsString","replace","RegExp","fetch","then","res","json","result","statusCode","body","JSON","parse","error","console","Paper","className","root","InputBase","input","placeholder","inputProps","onChange","e","target","value","IconButton","type","iconButton","aria-label","makeStyles","createStyles","padding","display","alignItems","width","marginLeft","spacing","flex","divider","height","margin","RecipeCard","missingOrAll","missingIngredients","ingredientsMissing","ingredientsList","ingredientsAll","Slide","direction","mountOnEnter","unmountOnExit","in","style","transitionDelay","transitionDelayMs","Card","onClick","getAndSetLinks","index","CardActionArea","CardMedia","media","image","imageUrl","title","CardContent","Typography","gutterBottom","variant","color","success","main","warning","opacity","text","secondary","Recipes","ids","links","recipeCards","setRecipeCards","clickedIndex","length","join","urls","forEach","recipeInfo","push","sourceUrl","parseRecipeInfoBulk","window","open","useEffect","apiResponse","CircularProgress","Object","keys","recipeCardsArray","trim","DOMParser","parseFromString","documentElement","textContent","ingredients","i","name","substring","parseMissingIngredients","missedIngredients","id","Grid","container","justify","App","ThemeProvider","CssBaseline","Container","grid","subtitle","searchbar","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.237d683e.chunk.js","sourcesContent":["import { createMuiTheme } from \"@material-ui/core/styles\";\r\nimport purple from '@material-ui/core/colors/purple';\r\nimport green from '@material-ui/core/colors/green';\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n      primary: { 500: '#890000' }\r\n    },\r\n  });\r\n\r\n  export default theme;\r\n  ","\r\nimport React, { useState } from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport mockFindByIngredientsResponse from '../MockResponses/findByIngredients';\r\n\r\ninterface props {\r\n    setApiResponse: (data: Object) => void;\r\n}\r\n\r\nlet searchedValue:string = '';\r\n\r\nexport default function SearchBar(props:props) {\r\n    const classes = useStyles();\r\n    const [inputValue, setInputValue] = useState('');\r\n    let isLoading:Boolean = false;\r\n\r\n    function handleSubmit(event:any) {\r\n        event.preventDefault();\r\n        if (inputValue === '' || isLoading || searchedValue === inputValue)\r\n            return;\r\n        \r\n        isLoading = true;\r\n\r\n        props.setApiResponse('loading'); // This clears the current recipe cards and adds the loading spinner\r\n\r\n        searchedValue = inputValue;\r\n        let ingredientsString = inputValue.replace(RegExp(/,\\s+/, 'g'), ',');\r\n        fetch(`http://localhost:5000/spoonacularAPI/findByIngredients?ingredients=${ingredientsString}`)\r\n            .then(res => res.json())\r\n            .then(\r\n            (result) => {\r\n                isLoading = false;\r\n                if (result.statusCode === 200 && result.body)\r\n                    props.setApiResponse(JSON.parse(result.body));\r\n                else\r\n                    props.setApiResponse({});\r\n            },\r\n            (error) => {\r\n                isLoading = false;\r\n                console.error(error)\r\n            }\r\n        );\r\n        //props.setApiResponse(mockFindByIngredientsResponse);\r\n    }\r\n\r\n    return(\r\n        <form onSubmit={handleSubmit}>\r\n            <Paper className={classes.root}>\r\n                <InputBase\r\n                    className={classes.input}\r\n                    placeholder=\"Search Ingredients\"\r\n                    inputProps={{ 'aria-label': 'search ingredients' }}\r\n                    onChange={(e) => {setInputValue(e.target.value)}}\r\n                    value={inputValue}\r\n                />\r\n                <IconButton type=\"submit\" className={classes.iconButton} aria-label=\"search\">\r\n                    <SearchIcon />\r\n                </IconButton>\r\n            </Paper>\r\n        </form>\r\n    );\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            padding: '2px 4px',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            width: 400\r\n        },\r\n        input: {\r\n            marginLeft: theme.spacing(1),\r\n            flex: 1,\r\n        },\r\n        iconButton: {\r\n            padding: 10,\r\n        },\r\n        divider: {\r\n            height: 28,\r\n            margin: 4,\r\n        },\r\n    }),\r\n);","import React from 'react'; // let's also import Component\r\nimport { makeStyles} from '@material-ui/core/styles';\r\nimport { Card, CardActionArea, CardMedia, CardContent, Typography } from '@material-ui/core';\r\nimport Slide from '@material-ui/core/Slide';\r\n\r\ninterface props {\r\n  title: string;\r\n  imageUrl: string;\r\n  index: number;\r\n  missingIngredients: string;\r\n  getAndSetLinks: (clickedId: number) => void;\r\n  transitionDelayMs: number;\r\n}\r\n\r\nexport default function RecipeCard(props:props) {\r\n  const classes = useStyles()\r\n\r\n  let missingOrAll;\r\n  if (props.missingIngredients) {\r\n    missingOrAll = \r\n      <>\r\n        <span className={classes.ingredientsMissing}>Missing: </span><span className={classes.ingredientsList}>{props.missingIngredients}</span>\r\n      </>;\r\n  } else {\r\n    missingOrAll = \r\n      <>\r\n        <span className={classes.ingredientsAll}>You have all the ingredients!</span>\r\n      </>\r\n  }\r\n    \r\n  return (\r\n    <Slide direction=\"up\" mountOnEnter unmountOnExit in={true} style={{ transitionDelay: true ? `${props.transitionDelayMs}ms` : '0ms' }}>\r\n      <Card className={classes.root} onClick={() => props.getAndSetLinks(props.index)}>\r\n        <CardActionArea>\r\n          <CardMedia\r\n            className={classes.media}\r\n            image={props.imageUrl}\r\n            title={props.title}\r\n          />\r\n          <CardContent>\r\n            <Typography gutterBottom variant=\"h6\">\r\n              {props.title}\r\n            </Typography>\r\n            <Typography variant=\"subtitle2\">\r\n              {missingOrAll}\r\n            </Typography>\r\n          </CardContent>\r\n        </CardActionArea>\r\n      </Card>\r\n    </Slide>\r\n  )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    margin: theme.spacing(3),\r\n    width: 345,\r\n  },\r\n  media: {\r\n    height: 140,\r\n  },\r\n  ingredientsAll: {\r\n    color: theme.palette.success.main,\r\n  },\r\n  ingredientsMissing: {\r\n    color: theme.palette.warning.main,\r\n    opacity: 0.75\r\n  },\r\n  ingredientsList: {\r\n    color: theme.palette.text.secondary\r\n  }\r\n}));\r\n\r\n\r\n\r\n\r\n","import React, { useState, useEffect } from 'react'; // let's also import Component\r\nimport RecipeCard from './RecipeCard';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport mockInformationBulk from '../MockResponses/informationBulk';\r\n\r\ninterface props {\r\n    apiResponse: any;\r\n}\r\n\r\nexport default function Recipes(props:props) {\r\n\r\n  const [recipeCards, setRecipeCards] = useState<Array<any>>();\r\n  let ids:Array<number>;\r\n  let links:Array<string>;\r\n  let isLoading:Boolean = false;\r\n\r\n  useEffect(() => {\r\n    if (props.apiResponse === 'loading') {\r\n      setRecipeCards([<CircularProgress />]);\r\n    } else if (props.apiResponse && Object.keys(props.apiResponse).length !== 0) {\r\n      let recipeCardsArray:any = [];\r\n      ids = [];\r\n      links = [];\r\n      let transitionDelayMs = 0;\r\n      let index = 0;\r\n      props.apiResponse.forEach((result:any) => {\r\n        let title = htmlDecode(result.title);\r\n        let missingIngredients = parseMissingIngredients(result.missedIngredients);\r\n        ids.push(result.id);\r\n        recipeCardsArray.push(\r\n            <RecipeCard title={title} imageUrl={result.image} index={index} missingIngredients={missingIngredients} getAndSetLinks={getAndSetLinks} transitionDelayMs={transitionDelayMs} />\r\n        );\r\n        transitionDelayMs += 50;\r\n        index++;\r\n      });\r\n      setRecipeCards(recipeCardsArray);\r\n    } else {\r\n      setRecipeCards([]);\r\n    }\r\n  }, [props.apiResponse])\r\n\r\n  function parseRecipeInfoBulk(result:Array<Object>):void {\r\n    let urls:any = [];\r\n    result.forEach((recipeInfo:any) => {\r\n      urls.push(recipeInfo.sourceUrl);\r\n    });\r\n    links = urls;\r\n  }\r\n\r\n  function getAndSetLinks(clickedIndex:number) {\r\n    if (isLoading)\r\n      return;\r\n\r\n    if (links.length === 0) {\r\n      isLoading = true;\r\n      fetch(`http:/localhost:5000/spoonacularAPI/informationBulk?ids=${ids.join(',')}`)\r\n        .then(res => res.json())\r\n        .then(\r\n        (result) => {\r\n          isLoading = false;\r\n          if (result.statusCode === 200 && result.body) {\r\n            parseRecipeInfoBulk(JSON.parse(result.body));\r\n            window.open(links[clickedIndex]);\r\n          } else {\r\n            console.error('server error');\r\n          }\r\n        },\r\n        (error) => {\r\n          isLoading = false;\r\n          console.error('server error')\r\n        }\r\n      );\r\n    } else {\r\n      window.open(links[clickedIndex]);\r\n    }\r\n\r\n    // if (links.length === 0)\r\n    //   parseRecipeInfoBulk(mockInformationBulk);\r\n\r\n    // window.open(links[clickedIndex]);\r\n  }\r\n\r\n  function htmlDecode(input:string):string {\r\n    input = input.trim();\r\n    let doc = new DOMParser().parseFromString(input, \"text/html\");\r\n    return doc.documentElement.textContent || '';\r\n  }\r\n  \r\n  function parseMissingIngredients(ingredients:Array<any>):string {\r\n    let missingIngredients = ''\r\n    ingredients.forEach((i) => {\r\n      missingIngredients += i.name + ', ';\r\n    });\r\n    return missingIngredients.substring(0, missingIngredients.length-2);\r\n  }\r\n\r\n  return (\r\n    <Grid container spacing={3} justify='center'>\r\n      {recipeCards}\r\n    </Grid>\r\n  );\r\n}","import React, { useState } from 'react';\r\n\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Container from '@material-ui/core/Container';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { ThemeProvider, makeStyles, Theme, createStyles } from '@material-ui/core/styles'\r\n\r\nimport theme from './theme'\r\nimport SearchBar from './Components/SearchBar';\r\nimport Recipes from './Components/Recipes';\r\n\r\n\r\nexport default function App() {\r\n  const [apiResponse, setApiResponse] = useState({});\r\n  const classes = useStyles()\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <Container>\r\n        <Grid container className={classes.grid} alignItems='center' direction='column'>\r\n            <Typography variant=\"h2\">\r\n              Recipe Finder\r\n            </Typography>\r\n            <Typography className={classes.subtitle} gutterBottom variant=\"subtitle1\">\r\n              Enter your ingredients below (comma seperated) to search recipes:\r\n            </Typography>\r\n            <div className={classes.searchbar}>\r\n              <SearchBar setApiResponse={setApiResponse} />\r\n            </div>\r\n            <Recipes apiResponse={apiResponse} />\r\n        </Grid>\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  grid: {\r\n    'padding-top': '50px'\r\n  },\r\n  subtitle: {\r\n    'padding-bottom': '10px'\r\n  },\r\n  searchbar: {\r\n    'padding-bottom': '20px'\r\n  }\r\n}));\r\n\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);  \r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n}\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}